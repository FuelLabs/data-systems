name: Setup Rust
description: Install Rust tooling with Cache and Build Dependencies

inputs:
  target:
    description: Rust target platforms
    required: false
    default: x86_64-unknown-linux-gnu
  toolchain:
    description: Rust toolchain version to install
    required: true
    default: 1.85.1
  cache:
    description: Use sscache
    required: false
    default: "true"

runs:
  using: composite
  steps:
    - name: Create .env file with NATS environment variables
      shell: bash
      run: |
        set_env_var() {
          echo "$1=${!1:-$2}" >> $GITHUB_ENV
          echo "$1=${!1:-$2}" >> .env
        }
        set_env_var "NATS_SYSTEM_USER" "sys"
        set_env_var "NATS_SYSTEM_PASS" "sys"
        set_env_var "NATS_ADMIN_USER" "admin"
        set_env_var "NATS_ADMIN_PASS" "admin"
        set_env_var "DATABASE_URL" "postgresql://postgres:postgres@127.0.0.1:5432/fuel_streams?sslmode=disable"

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.toolchain }}
        target: ${{ inputs.target }}
        components: clippy, rustfmt

    - name: Install Rustfmt
      uses: taiki-e/cache-cargo-install-action@v2
      with:
        tool: sqlx-cli@0.8.3

    - uses: taiki-e/cache-cargo-install-action@v2
      with:
        tool: taplo-cli@0.9.3

    - uses: taiki-e/cache-cargo-install-action@v2
      with:
        tool: cargo-edit@0.12.3

    - uses: BuildJet/cache@v4
      if: inputs.cache == 'true' || github.event_name != 'release' || github.event_name != 'workflow_dispatch'
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ inputs.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ inputs.target }}-
          ${{ runner.os }}-cargo-
        save-always: true

    - name: Setup Warp cache for sccache
      if: inputs.cache == 'true' || github.event_name != 'release' || github.event_name != 'workflow_dispatch'
      uses: BuildJet/cache@v4
      with:
        path: ~/.cache/sccache
        key: ${{ runner.os }}-sccache-${{ inputs.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-sccache-${{ inputs.target }}-
          ${{ runner.os }}-sccache-
        save-always: true

    - name: Install sccache
      shell: sh
      if: inputs.cache == 'true' || github.event_name != 'release' || github.event_name != 'workflow_dispatch'
      run: |
        curl -L https://github.com/mozilla/sccache/releases/download/v0.8.2/sccache-v0.8.2-x86_64-unknown-linux-musl.tar.gz | tar xz
        mv sccache-v0.8.2-x86_64-unknown-linux-musl/sccache ~/.cargo/bin/
        chmod +x ~/.cargo/bin/sccache

    - name: Set Rust caching env vars only on non-release runs
      shell: sh
      if: inputs.cache == 'true' || github.event_name != 'release' || github.event_name != 'workflow_dispatch'
      run: |-
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
