//! # Loader Module
//!
//! This module provides functionality for loading and processing binaries generated by Sway.
//! **Important:** All functions within this module assume the binary adheres to the structure
//! produced by Sway. Using binaries generated by other means (e.g., manually constructed binaries)
//! may lead to unexpected or incorrect results.
//!
//! For more information on Sway, please visit the [Sway GitHub repository](https://github.com/FuelLabs/sway).

use fuel_asm::{op, Instruction, RegId};
use fuels_core::{constants::WORD_SIZE, types::errors::Result};

use super::assembly::WasmFriendlyCursor;

pub fn extract_blob_id_and_section_offset(
    binary: &[u8],
) -> Result<Option<([u8; 32], usize)>> {
    let (has_configurables, mut cursor) = if let Some(cursor) =
        consume_instructions(binary, &loader_instructions_w_configurables())
    {
        (true, cursor)
    } else if let Some(cursor) =
        consume_instructions(binary, &loader_instructions_no_configurables())
    {
        (false, cursor)
    } else {
        return Ok(None);
    };

    let blob_id = cursor.consume_fixed("blob id")?;
    if has_configurables {
        let _section_len =
            cursor.consume(WORD_SIZE, "section with configurables len")?;
    }

    let section_offset = binary
        .len()
        .checked_sub(cursor.unconsumed())
        .expect("must be less or eq");

    Ok(Some((blob_id, section_offset)))
}

fn consume_instructions<'a>(
    binary: &'a [u8],
    expected_instructions: &[Instruction],
) -> Option<WasmFriendlyCursor<'a>> {
    let loader_instructions_byte_size =
        expected_instructions.len() * Instruction::SIZE;

    let mut script_cursor = WasmFriendlyCursor::new(binary);
    let instruction_bytes = script_cursor
        .consume(loader_instructions_byte_size, "loader instructions")
        .ok()?;

    let instructions = fuel_asm::from_bytes(instruction_bytes.to_vec())
        .collect::<std::result::Result<Vec<Instruction>, _>>()
        .ok()?;

    instructions
        .iter()
        .zip(expected_instructions.iter())
        .all(|(actual, expected)| actual == expected)
        .then_some(script_cursor)
}
fn loader_instructions_no_configurables() -> [Instruction; 8] {
    const REG_ADDRESS_OF_DATA_AFTER_CODE: u8 = 0x10;
    const REG_START_OF_LOADED_CODE: u8 = 0x11;
    const REG_GENERAL_USE: u8 = 0x12;

    const NUM_OF_INSTRUCTIONS: u16 = 8;

    // There are 2 main steps:
    // 1. Load the blob content into memory
    // 2. Jump to the beginning of the memory where the blob was loaded
    [
        // 1. Load the blob content into memory
        // Find the start of the hardcoded blob ID, which is located after the loader code ends.
        op::move_(REG_ADDRESS_OF_DATA_AFTER_CODE, RegId::PC),
        // hold the address of the blob ID.
        op::addi(
            REG_ADDRESS_OF_DATA_AFTER_CODE,
            REG_ADDRESS_OF_DATA_AFTER_CODE,
            NUM_OF_INSTRUCTIONS * Instruction::SIZE as u16,
        ),
        // The code is going to be loaded from the current value of SP onwards, save
        // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.
        op::move_(REG_START_OF_LOADED_CODE, RegId::SP),
        // REG_GENERAL_USE to hold the size of the blob.
        op::bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),
        // Push the blob contents onto the stack.
        op::ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),
        // Jump into the memory where the contract is loaded.
        // What follows is called _jmp_mem by the sway compiler.
        // Subtract the address contained in IS because jmp will add it back.
        op::sub(
            REG_START_OF_LOADED_CODE,
            REG_START_OF_LOADED_CODE,
            RegId::IS,
        ),
        // jmp will multiply by 4, so we need to divide to cancel that out.
        op::divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),
        // Jump to the start of the contract we loaded.
        op::jmp(REG_START_OF_LOADED_CODE),
    ]
}

pub fn loader_instructions_w_configurables() -> [Instruction; 12] {
    const BLOB_ID_SIZE: u16 = 32;
    const REG_ADDRESS_OF_DATA_AFTER_CODE: u8 = 0x10;
    const REG_START_OF_LOADED_CODE: u8 = 0x11;
    const REG_GENERAL_USE: u8 = 0x12;

    // extract the length of the NoDataSectionLoaderInstructions type
    const NUM_OF_INSTRUCTIONS: u16 = 12;

    // There are 3 main steps:
    // 1. Load the blob content into memory
    // 2. Load the data section right after the blob
    // 3. Jump to the beginning of the memory where the blob was loaded
    [
        // 1. Load the blob content into memory
        // Find the start of the hardcoded blob ID, which is located after the loader code ends.
        op::move_(REG_ADDRESS_OF_DATA_AFTER_CODE, RegId::PC),
        // hold the address of the blob ID.
        op::addi(
            REG_ADDRESS_OF_DATA_AFTER_CODE,
            REG_ADDRESS_OF_DATA_AFTER_CODE,
            NUM_OF_INSTRUCTIONS * Instruction::SIZE as u16,
        ),
        // The code is going to be loaded from the current value of SP onwards, save
        // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.
        op::move_(REG_START_OF_LOADED_CODE, RegId::SP),
        // REG_GENERAL_USE to hold the size of the blob.
        op::bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),
        // Push the blob contents onto the stack.
        op::ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),
        // Move on to the data section length
        op::addi(
            REG_ADDRESS_OF_DATA_AFTER_CODE,
            REG_ADDRESS_OF_DATA_AFTER_CODE,
            BLOB_ID_SIZE,
        ),
        // load the size of the data section into REG_GENERAL_USE
        op::lw(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE, 0),
        // after we have read the length of the data section, we move the pointer to the actual
        // data by skipping WORD_SIZE B.
        op::addi(
            REG_ADDRESS_OF_DATA_AFTER_CODE,
            REG_ADDRESS_OF_DATA_AFTER_CODE,
            WORD_SIZE as u16,
        ),
        // load the data section of the executable
        op::ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 2),
        // Jump into the memory where the contract is loaded.
        // What follows is called _jmp_mem by the sway compiler.
        // Subtract the address contained in IS because jmp will add it back.
        op::sub(
            REG_START_OF_LOADED_CODE,
            REG_START_OF_LOADED_CODE,
            RegId::IS,
        ),
        // jmp will multiply by 4, so we need to divide to cancel that out.
        op::divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),
        // Jump to the start of the contract we loaded.
        op::jmp(REG_START_OF_LOADED_CODE),
    ]
}
