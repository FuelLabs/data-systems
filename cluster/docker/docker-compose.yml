services:
  nats:
    profiles:
      - all
      - nats
    image: nats:latest
    container_name: nats
    restart: always
    ports:
      - 4222:4222
      - 8222:8222
    volumes:
      - ./nats-config/core.conf:/etc/nats/nats.conf
      - ./nats-config/accounts.conf:/etc/nats/accounts.conf
    command:
      - -m
      - "8222"
      - --name=fuel-streams-nats
      - --js
      - --config=/etc/nats/nats.conf
      - -D
    env_file:
      - ./../../.env

  postgres:
    profiles:
      - all
      - postgres
    image: postgres:17
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-fuel_streams}
      POSTGRES_MAX_CONNECTIONS: "2000"
      POSTGRES_SHARED_BUFFERS: "512MB"
    command:
      - "postgres"
      - "-c"
      - "max_connections=2000"
      - "-c"
      - "shared_buffers=512MB"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    profiles:
      - all
      - redis
    image: redis:7 # Use Redis 7 for compatibility with Upstash features
    container_name: redis
    restart: always
    ports:
      - "6379:6379" # Default Redis port
    command:
      - redis-server
      - --requirepass ${REDIS_PASSWORD:-redis_password} # Set a password for security
      - --appendonly yes # Enable AOF persistence to match Upstash durability
    volumes:
      - redis_data:/data # Persist Redis data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password} # Password for Redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  localstack:
    profiles:
      - all
      - s3
    image: localstack/localstack:latest
    container_name: localstack
    restart: always
    ports:
      - "4566:4566" # LocalStack main gateway port
      - "4572:4572" # S3 service port (optional)
    environment:
      - SERVICES=s3 # Enable just S3 service
      - DEBUG=1
      - DEFAULT_REGION=us-east-1
    volumes:
      - ./localstack-data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock

  adminer:
    profiles:
      - all
      - postgres
    image: adminer:latest
    container_name: adminer
    depends_on:
      - postgres
    ports:
      - 8085:8080

  prometheus:
    profiles:
      - all
      - monitoring
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - 9090:9090

  node-exporter:
    profiles:
      - all
      - monitoring
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    depends_on:
      - prometheus
    deploy:
      mode: global

  cadvisor:
    profiles:
      - all
      - monitoring
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 9200:8080
    depends_on:
      - prometheus
    deploy:
      mode: global

  alertmanager:
    profiles:
      - all
      - monitoring
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: always
    volumes:
      - ./monitoring/alertmanager/:/etc/alertmanager/
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    depends_on:
      - prometheus
    ports:
      - 9093:9093

  grafana:
    profiles:
      - all
      - monitoring
    image: grafana/grafana:latest
    container_name: grafana
    user: "472"
    restart: always
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./monitoring/grafana/config.monitoring
    ports:
      - 3000:3000
    depends_on:
      - prometheus

volumes:
  prometheus_data:
  grafana_data:
  postgres_data:
  redis_data:
