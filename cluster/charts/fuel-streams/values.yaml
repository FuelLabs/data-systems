# ------------------------------------------------------------------------------
# ServiceAccount
# ------------------------------------------------------------------------------

serviceAccount:
  create: true
  automount: true

# ------------------------------------------------------------------------------
# Global Config
# ------------------------------------------------------------------------------

config:
  labels: {}
  annotations: {}
  # Override the name and fullname of the chart
  nameOverride: ""
  fullnameOverride: ""
  # Create roles and rolebindings for the fuel-streams serviceaccount
  createRoles: true
  # Enable health checks for all services
  healthChecks: true

  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true
  startupProbe:
    enabled: true

  # Default pod security context
  podSecurityContext:
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true

  # Default container security context
  containerSecurityContext:
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    capabilities:
      drop: [ALL]
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false

  # Default pod affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: publisher
            topologyKey: topology.kubernetes.io/zone

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

# ------------------------------------------------------------------------------
# Global ConfigMap
# ------------------------------------------------------------------------------

commonConfigMap:
  enabled: true
  data:
    USE_METRICS: "false"
    NATS_URL: "fuel-streams-nats:4222"
    NATS_SYSTEM_USER: "sys"
    NATS_SYSTEM_PASS: "sys"
    NATS_ADMIN_USER: "admin"
    NATS_ADMIN_PASS: "admin"
    # For local purposes only, for production use fuel-streams-keys secret
    DB_TYPE: "Aurora"
    DATABASE_URL: "postgresql://root:root@fuel-streams-cockroachdb:26257/fuel_streams?sslmode=disable"

# This is a secret that is used for local development
# It is not used in production
localSecrets:
  enabled: false
  data: {}

# ------------------------------------------------------------------------------
# Monitoring
# ------------------------------------------------------------------------------

monitoring:
  enabled: false

# ------------------------------------------------------------------------------
# Publisher configuration
# ------------------------------------------------------------------------------

publisher:
  enabled: true
  network: mainnet
  port: 9001
  ports: []

  image:
    repository: ghcr.io/fuellabs/sv-publisher
    pullPolicy: Always
    tag: latest
    args: []

  # You can override the env variables for the container here
  # using a map or an array of key-value pairs
  envFrom: []
  env:
    TMPDIR: "/var/fuel-streams/tmp"
    DB_PATH: /mnt/db

  prometheus:
    enabled: false
    scrape: true
    path: /metrics

  storage:
    name: rocks-db
    size: 500Gi
    storageClass: "gp3-generic"
    accessMode: ReadWriteOnce
    mountPath: /mnt/db

  config:
    replicaCount: 1
    labels: {}
    annotations: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    imagePullSecrets: []
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    podSecurityContext: {}
    containerSecurityContext: {}
    resources: {}

  autoscaling:
    enabled: false

# ------------------------------------------------------------------------------
# Consumer configuration
# ------------------------------------------------------------------------------

consumer:
  enabled: true
  port: 9002
  ports: []

  image:
    repository: ghcr.io/fuellabs/sv-consumer
    pullPolicy: Always
    tag: latest
    args: []

  # You can override the env variables for the container here
  # using a map or an array of key-value pairs
  envFrom: []
  env: {}

  config:
    replicaCount: 3
    labels: {}
    annotations: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    imagePullSecrets: []
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    podSecurityContext: {}
    containerSecurityContext: {}
    resources: {}

  autoscaling:
    enabled: false

# ------------------------------------------------------------------------------
# Consumer configuration
# ------------------------------------------------------------------------------

webserver:
  enabled: true
  network: mainnet
  port: 9003
  ports: []

  image:
    repository: ghcr.io/fuellabs/sv-webserver
    pullPolicy: Always
    tag: latest

  service:
    enabled: true
    port: 8080
    type: LoadBalancer
    host: "stream-staging.fuel.network"
    config:
      annotations: {}
      labels: {}

  tls:
    enabled: true
    certificate:
      issuer: letsencrypt-prod
      duration: 2160h
      renewBefore: 360h
      config:
        annotations: {}
        labels: {}
    ingress:
      config:
        annotations: {}
        labels: {}

  # You can override the env variables for the container here
  # using a map or an array of key-value pairs
  envFrom: []
  env: {}

  config:
    replicaCount: 3
    labels: {}
    annotations: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    imagePullSecrets: []
    livenessProbe: {}
    readinessProbe: {}
    startupProbe: {}
    podSecurityContext: {}
    containerSecurityContext: {}
    resources: {}

  autoscaling:
    enabled: true

# ------------------------------------------------------------------------------
# NATS Core configuration
# ------------------------------------------------------------------------------

nats:
  enabled: true

  natsBox:
    enabled: false

  promExporter:
    enabled: false
    port: 6777
    image:
      repository: natsio/prometheus-nats-exporter
      tag: 0.15.0
    podMonitor:
      enabled: false
      metadata:
        labels:
          release: kube-prometheus-stack

  container:
    image:
      repository: nats
      tag: 2.10.24-alpine
    env:
      GOMEMLIMIT: 7GiB
    merge:
      resources:
        requests:
          cpu: 2
          memory: 8Gi

  service:
    enabled: true
    ports:
      nats:
        enabled: true
      cluster:
        enabled: true
      monitor:
        enabled: false

  config:
    cluster:
      enabled: true
      port: 6222
      replicas: 5
      routeURLs:
        useFQDN: true

    jetstream:
      enabled: true
      fileStore:
        dir: /data
        pvc:
          enabled: true
          size: 2000Gi
          storageClassName: "gp3-generic"

    monitor:
      enabled: false
      port: 8222

    merge:
      max_payload: << 32MiB >>
      jetstream:
        sync_interval: always
        max_outstanding_catchup: << 512MiB >>
        max_file_store: << 2000GiB >>
        max_memory_store: << 7GiB >>
      system_account: SYS
      $include: auth.conf

  statefulSet:
    merge:
      spec:
        affinity:
          $tplYaml: |
            {{- include "k8s.pod-config.affinityy" . | nindent 4 }}

  configMap:
    merge:
      $tplYaml: |
        {{- include "nats-accounts" . | nindent 8 }}
