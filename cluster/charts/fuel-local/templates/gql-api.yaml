{{ if not .Values.onlyRequiredBaseServices }}
{{ if .Values.gqlApi.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: gql-api
data:
  config.toml: {{ tpl (.Files.Get (printf "files/%s/gql-api/config.toml.tmpl" (.Values.gqlApi.configFilesFolders.config | default "master"))) . | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gql-certs
data:
  privkey.pem: {{ tpl (.Files.Get (printf "files/%s/gql-api/certs/privkey.pem" (.Values.gqlApi.configFilesFolders.config | default "master"))) . | quote }}
  fullchain.pem: {{ tpl (.Files.Get (printf "files/%s/gql-api/certs/fullchain.pem" (.Values.gqlApi.configFilesFolders.config | default "master"))) . | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gql-aws
data:
  config: {{ tpl (.Files.Get (printf "files/%s/gql-api/aws/config" (.Values.gqlApi.configFilesFolders.config | default "master"))) . | quote }}
  credentials: {{ tpl (.Files.Get (printf "files/%s/gql-api/aws/credentials" (.Values.gqlApi.configFilesFolders.config | default "master"))) . | quote }}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    service: gql-api
  name: gql-api
spec:
  ports:
    - name: public
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    service: gql-api
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gql-api
  labels:
    service: gql-api
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      service: gql-api
  template:
    metadata:
      labels:
        service: gql-api
    spec:
      serviceAccountName: {{ .Values.serviceAccount }}
      #imagePullSecrets:
      #- name: fuel-local
      containers:
      - env:
        - name: RUST_LOG
          value: "info,gql,gqli,http"
        - name: ENV
          value: {{ .Values.gqlApi.env }}
        - name: AWS_CONFIG_FILE
          value: "/aws/config"
        - name: AWS_SHARED_CREDENTIALS_FILE
          value: "/aws/credentials"
        - name: AWS_PROFILE
          value: "default"
        name: gql-api
        imagePullPolicy: Always
        image: "{{ .Values.gqlApi.image }}:{{ .Values.gqlApi.tag }}"
        ports:
          - containerPort: 8080
        volumeMounts:
        - name: gql-api
          subPath: config.toml
          mountPath: /app/config.toml
        - name: gql-certs
          subPath: privkey.pem
          mountPath: /certs/privkey.pem
        - name: gql-certs
          subPath: fullchain.pem
          mountPath: /certs/fullchain.pem
        - name: gql-aws
          subPath: config
          mountPath: /aws/config
        - name: gql-aws
          subPath: credentials
          mountPath: /aws/credentials
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
          successThreshold: 1
          failureThreshold: 10
          periodSeconds: 5
          timeoutSeconds: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        {{- if not .Values.disableResourceLimits }}
        resources:
        {{- .Values.resourceProfile.gqlApi | toYaml | nindent 12 }}
        {{- end }}
      enableServiceLinks: false
      restartPolicy: Always
      volumes:
      - name: gql-api
        configMap:
          name: gql-api
      - name: gql-certs
        configMap:
          name: gql-certs
      - name: gql-aws
        configMap:
          name: gql-aws
    {{ end }}
    {{ end }}
