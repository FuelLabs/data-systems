{{ if not .Values.onlyRequiredBaseServices }}
{{ if .Values.monitoring.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
data:
  datasources.yaml: {{ tpl (.Files.Get (printf "files/%s/monitoring/grafana/datasources.yaml" (.Values.monitoring.configFilesFolders.grafanaDatasource | default "master"))) . | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-provisioning
data:
  dashboards.yaml: {{ tpl (.Files.Get (printf "files/%s/monitoring/grafana/dashboards.yaml" (.Values.monitoring.configFilesFolders.grafanaDashboards | default "master"))) . | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
data:
  fuel-publisher-metrics-dashboard.json: {{ tpl (.Files.Get (printf "files/%s/monitoring/grafana/dashboards/fuel-publisher-metrics-dashboard.json" (.Values.monitoring.configFilesFolders.fuelPublisher | default "master"))) . | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
data:
  prometheus.yml: {{ tpl (.Files.Get (printf "files/%s/monitoring/prometheus.yaml" (.Values.monitoring.configFilesFolders.prometheus | default "master"))) . | quote }}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: monitoring
  name: monitoring
spec:
  ports:
    - name: grafana
      port: 3000
      protocol: TCP
      targetPort: 3000
    - name: prometheus
      port: 9090
      protocol: TCP
      targetPort: 9090
  selector:
    service: monitoring
---
{{ if .Values.roles.create }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: {{ .Values.serviceAccount }}
    namespace: {{ .Values.namespace }}
---
{{ end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: monitoring
  name: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      service: monitoring
  template:
    metadata:
      labels:
        service: monitoring
    spec:
      serviceAccountName: {{ .Values.serviceAccount }}
      #imagePullSecrets:
      #- name: fuel-local
      containers:
      - image: "{{ .Values.grafana.image }}:{{ .Values.grafana.tag }}"
        name: grafana
        ports:
        - name: "http"
          containerPort: 3000
        {{- if not .Values.disableResourceLimits }}
        resources:
        {{- .Values.resourceProfile.grafana | toYaml | nindent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /etc/grafana/provisioning/datasources/
          name: grafana-datasources
        - mountPath: /etc/grafana/provisioning/dashboards/
          name: grafana-dashboards-provisioning
        - mountPath: /var/lib/grafana/dashboards/
          name: grafana-dashboards
      - image: "{{ .Values.prometheus.image }}:{{ .Values.prometheus.tag }}"
        name: prometheus
        env:
        - name: METRIC_CLIENT_SSL_PASSWORD
          value: metric-client-password
        ports:
        - name: "http"
          containerPort: 9090
        {{- if not .Values.disableResourceLimits }}
        resources:
        {{- .Values.resourceProfile.prometheus | toYaml | nindent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus
          subPath: prometheus.yml
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-dashboards-provisioning
        configMap:
          name: grafana-dashboards-provisioning
      - name: prometheus
        configMap:
          name: prometheus
      restartPolicy: Always
{{ end }}
{{ end }}
